function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

import React, { Component } from "react";
import styles from './style.module.css';

var Toast =
/*#__PURE__*/
function (_Component) {
  _inherits(Toast, _Component);

  function Toast() {
    var _this;

    _classCallCheck(this, Toast);

    _this = _possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).call(this));
    Object.defineProperty(_assertThisInitialized(_this), "state", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_assertThisInitialized(_this), "_handle", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    _this.state = {
      text: "",
      isShow: false
    };
    return _this;
  }

  _createClass(Toast, [{
    key: "toast",
    value: function toast(_ref) {
      var _this2 = this;

      var text = _ref.text,
          _ref$delay = _ref.delay,
          delay = _ref$delay === void 0 ? 2000 : _ref$delay;

      if (this._handle !== undefined) {
        window.clearTimeout(this._handle);
      }

      this.setState({
        text: text,
        isShow: true
      });
      this._handle = window.setTimeout(function () {
        _this2.setState({
          isShow: false
        });
      }, delay);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.toast(this.props);
    }
  }, {
    key: "render",
    value: function render() {
      var coverClassName = styles.cover + ' ' + styles.aBouncein;
      return React.createElement("div", {
        className: coverClassName,
        style: {
          "display": this.state.isShow ? "table" : "none"
        }
      }, React.createElement("div", {
        className: styles.inner
      }, React.createElement("div", {
        className: styles.main
      }, this.state.text)));
    }
  }]);

  return Toast;
}(Component);

export { Toast as default };